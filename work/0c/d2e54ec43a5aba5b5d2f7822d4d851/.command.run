#!/bin/bash
#$ -wd /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851
#$ -N nf-actuallySleep_(15)
#$ -o /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851/.command.log
#$ -j y
#$ -terse
#$ -notify
#$ -pe smp 2
#$ -S /bin/bash

# NEXTFLOW TASK: actuallySleep (15)
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a ALL_CHILD
    while read P PP;do
        ALL_CHILD[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    walk() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${ALL_CHILD[$1]:=}; do walk $i; done
    }

    walk $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

on_exit() {
  exit_status=${ret:=$?}
  printf $exit_status > /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851/.exitcode
  set +u
  [[ "$COUT" ]] && rm -f "$COUT" || true
  [[ "$CERR" ]] && rm -f "$CERR" || true
  exit $exit_status
}

on_term() {
    set +e
    [[ "$pid" ]] && nxf_kill $pid
}

trap on_exit EXIT
trap on_term TERM INT USR1 USR2

NXF_SCRATCH=''
[[ $NXF_DEBUG > 0 ]] && nxf_env
touch /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851/.command.begin
[ -f /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851/.command.env ] && source /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851/.command.env
[[ $NXF_SCRATCH ]] && echo "nxf-scratch-dir $HOSTNAME:$NXF_SCRATCH" && cd $NXF_SCRATCH
rm -f sleep_script_16.sh
ln -s /shared/work/49/554470418953fb9f77f624bf569248/sleep_script_16.sh sleep_script_16.sh


set +e
COUT=$PWD/.command.po; mkfifo "$COUT"
CERR=$PWD/.command.pe; mkfifo "$CERR"
tee .command.out < "$COUT" &
tee1=$!
tee .command.err < "$CERR" >&2 &
tee2=$!
(
/bin/bash /shared/work/0c/d2e54ec43a5aba5b5d2f7822d4d851/.command.run.1
) >"$COUT" 2>"$CERR" &
pid=$!
wait $pid || ret=$?
wait $tee1 $tee2
